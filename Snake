<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Snake Game - Cats & Guns Central</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body { background: #000; color: #fff; font-family: Arial, sans-serif; text-align: center; padding: 20px; }
    header { margin-bottom: 20px; }
    header a { color: #1a73e8; text-decoration: none; font-weight: bold; }
    canvas { background: #eee; border: 1px solid #ddd; display: block; margin: 0 auto; }
    #scoreContainer { margin-top: 10px; }
    #leaderboard { list-style: none; padding: 0; }
    #leaderboard li { margin: 3px 0; }
  </style>
</head>
<body>
  <header>
    <h1>Snake Game</h1>
    <nav>
      <a href="index.html">Back to Main Page</a>
    </nav>
  </header>
  
  <canvas id="snakeGameCanvas" width="600" height="400"></canvas>
  <div id="scoreContainer">
    <p>Score: <span id="scoreDisplay">0</span></p>
    <h3>Leaderboard</h3>
    <ul id="leaderboard"></ul>
  </div>
  
  <script type="module">
    // Firebase Imports
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js";
    import { getAuth } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-auth.js";
    import { getDatabase, ref, push, query, orderByChild, limitToLast, get } from "https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js";
    
    // Firebase Config with updated databaseURL
    const firebaseConfig = {
      apiKey: "AIzaSyD2B6KZgtYQPE4K-JF5GQszp5wjNgX6_MY",
      authDomain: "new-chat-8d4f4.firebaseapp.com",
      databaseURL: "https://snake-9161f-default-rtdb.firebaseio.com",
      projectId: "new-chat-8d4f4",
      storageBucket: "new-chat-8d4f4.firebasestorage.app",
      messagingSenderId: "825077448854",
      appId: "1:825077448854:web:3906174c00e1f6604782b7"
    };
    
    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getDatabase(app);
    const auth = getAuth(app);
    
    // For this page, assume "Anonymous" if not signed in.
    let currentUsername = "Anonymous";
    
    // Snake Game Variables
    const canvas = document.getElementById("snakeGameCanvas");
    const ctx = canvas.getContext("2d");
    const grid = 20;
    let count = 0;
    let snake = [{ x: 160, y: 160 }];
    let dx = grid;
    let dy = 0;
    let food = { x: 320, y: 320 };
    let score = 0;
    const scoreDisplay = document.getElementById("scoreDisplay");
    scoreDisplay.textContent = score;
    
    // Record high score if signed in
    function updateSnakeHighscore(score) {
      if (currentUsername === "Anonymous") {
        console.log("Score not recorded; user not signed in.");
        return;
      }
      const snakeScoreData = { username: currentUsername, score: score, timestamp: new Date().toISOString() };
      push(ref(db, "snake"), snakeScoreData)
        .then(() => console.log("High score recorded:", snakeScoreData))
        .catch((error) => console.error("Error recording high score:", error));
    }
    
    // Display top 5 high scores
    function displaySnakeHighscores() {
      const snakeScoresRef = ref(db, "snake");
      const snakeQuery = query(snakeScoresRef, orderByChild("score"), limitToLast(5));
      get(snakeQuery)
        .then((snapshot) => {
          const scoresArray = [];
          snapshot.forEach((childSnapshot) => {
            scoresArray.push(childSnapshot.val());
          });
          // Sort scores descending
          scoresArray.sort((a, b) => b.score - a.score);
          const leaderboard = document.getElementById("leaderboard");
          leaderboard.innerHTML = "";
          scoresArray.forEach((scoreObj) => {
            const li = document.createElement("li");
            li.textContent = scoreObj.username + ": " + scoreObj.score;
            leaderboard.appendChild(li);
          });
        })
        .catch((error) => console.error("Error fetching high scores:", error));
    }
    
    function getRandomFoodPosition() {
      return {
        x: Math.floor(Math.random() * (canvas.width / grid)) * grid,
        y: Math.floor(Math.random() * (canvas.height / grid)) * grid
      };
    }
    
    function gameLoop() {
      requestAnimationFrame(gameLoop);
      if (++count < 4) return;
      count = 0;
      
      const head = { x: snake[0].x + dx, y: snake[0].y + dy };
      snake.unshift(head);
      
      if (head.x === food.x && head.y === food.y) {
        score++;
        scoreDisplay.textContent = score;
        food = getRandomFoodPosition();
      } else {
        snake.pop();
      }
      
      if (
        head.x < 0 || head.x >= canvas.width ||
        head.y < 0 || head.y >= canvas.height ||
        snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)
      ) {
        // On collision, record score if signed in; then reset game state
        if (currentUsername !== "Anonymous") {
          updateSnakeHighscore(score);
        } else {
          console.log("Score not recorded; user not signed in.");
        }
        snake = [{ x: 160, y: 160 }];
        dx = grid;
        dy = 0;
        score = 0;
        scoreDisplay.textContent = score;
      }
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "red";
      ctx.fillRect(food.x, food.y, grid - 1, grid - 1);
      ctx.fillStyle = "green";
      snake.forEach(segment => {
        ctx.fillRect(segment.x, segment.y, grid - 1, grid - 1);
      });
    }
    
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft" && dx === 0) {
        dx = -grid; dy = 0;
      } else if (e.key === "ArrowRight" && dx === 0) {
        dx = grid; dy = 0;
      } else if (e.key === "ArrowUp" && dy === 0) {
        dx = 0; dy = -grid;
      } else if (e.key === "ArrowDown" && dy === 0) {
        dx = 0; dy = grid;
      }
    });
    
    gameLoop();
    displaySnakeHighscores();
  </script>
</body>
</html>
